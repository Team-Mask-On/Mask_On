{"version":3,"sources":["Components/SensorCard.js","Components/AverageChart.js","Components/CurrentChart.js","Components/SensorModal.js","Components/Sensor.js","Components/SearchBar.js","Components/KakaoMap.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","normal","padding","spacing","textAlign","minWidth","title","fontSize","fontWeight","SensorCard","maskedRatio","name","ratio","classes","Card","className","style","backgroundColor","String","color","getFontColor","Typography","component","time","content","legend","position","right","top","yaxis","text","stroke","fill","xaxis","line","ticks","AverageChart","props","averageData","maskedColor","unmaskedColor","charWidth","width","useState","crosshairValues","setCrosshairValues","targetTime","setTime","targetMasked","setMasked","targetUnmasked","setUnmasked","targetRatio","setRatio","onMouseLeave","stackBy","xType","height","tickValues","onNearestX","value","index","map","d","Object","values","barWidth","data","orientation","items","CurrentChart","maskCount","masked","unmaskCount","unmasked","angle","label","animation","colorType","labelsRadiusMultiplier","labelsStyle","textAnchor","showLabels","SensorModal","apiURL","show","handleClose","onClose","sensorInfo","currentMasked","currentUnmasked","totalDifference","ratioDifference","capacity","logView","setLogView","logData","setLogData","fetchLog","a","axios","get","sensor_id","then","response","console","log","catch","error","Modal","onHide","aria-labelledby","size","centered","Header","closeButton","Title","description","address","Body","created","id","display","justifyContent","Button","onClick","Tooltip","placement","arrow","IconButton","aria-label","Container","Row","Col","disableHeight","fetchAverage","Sensor","moveTo","currentTotal","current","averageTotal","average","average_masked","average_unmasked","currentMaskedRatio","toFixed","max_capacity","setAverageData","setShow","visible","options","kakao","maps","LatLng","latitude","longitude","zIndex","dangerouslySetInnerHTML","__html","renderToString","Math","random","base","breakpoints","up","left","card","searchBox","borderRadius","shape","fade","palette","common","white","marginLeft","marginRight","searchIcon","pointerEvents","alignItems","inputRoot","inputMain","SearchBar","onSearch","searchText","setSearchText","InputBase","placeholder","root","input","inputProps","onChange","e","target","onKeyPress","key","KakaoMap","refreshTerm","sensorData","setSensorData","setLatitude","setLongitude","moveToCurrentLocation","useCallback","navigator","geolocation","getCurrentPosition","coords","message","useEffect","fetchSensors","interval","setInterval","clearInterval","type","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","dismissable","click","Fragment","center","mapTypeId","MapTypeId","ROADMAP","maxLevel","minLevel","sensor","keyword","services","Places","keywordSearch","result","status","Status","OK","x","y","ZERO_RESULT","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAKMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,QAASF,EAAMG,QAAQ,IACvBC,UAAW,SACXC,SAAU,IAEZC,MAAO,CACLC,SAAU,GACVC,WAAY,SAiCDC,MA7Bf,YAAoC,IAGZC,EAHFC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,MACnBC,EAAUf,IAgBhB,OACE,8BACE,cAACgB,EAAA,EAAD,CACEC,UAAWF,EAAQZ,OACnBe,MAAO,CAAEC,iBAlBOP,EAkBuBE,EAjBxCF,GAAe,GACR,OAASQ,OAAqB,IAAdR,EAAoB,KAAO,YAE1C,oBAcwCS,MAXhC,SAACT,GAClB,OAAGA,GAAe,GACP,UAEA,UAO6CU,CAAaR,IAFrE,SAIE,cAACS,EAAA,EAAD,CAAYN,UAAWF,EAAQP,MAAOgB,UAAU,IAAhD,SAAqDX,S,6DCjCvDb,G,OAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACJC,QAASF,EAAMG,QAAQ,IACvBE,SAAU,IAEdkB,KAAM,CACFnB,UAAW,SACXG,SAAU,GACVC,WAAY,KAEhBgB,QAAS,CACLpB,UAAW,OACXG,SAAU,GACVC,WAAY,KAEhBiB,OAAQ,CACJC,SAAU,WACVC,MAAO,OACPC,IAAK,OAETC,MAAO,CACHC,KAAM,CACFC,OAAQ,OACRC,KAAM,UACNxB,WAAY,MAGpByB,MAAO,CACHC,KAAM,CAACH,OAAQ,WACfI,MAAO,CAACJ,OAAQ,WAChBD,KAAM,CAACC,OAAQ,OAAQC,KAAM,UAAWxB,WAAY,WAoG7C4B,MAhGf,SAAsBC,GAClB,IAoCsB3B,EApChBG,EAAUf,IACVwC,EAAc,CAACD,EAAMC,YAAN,OAA6BD,EAAMC,YAAN,UAC5CC,EAAc,UACdC,EAAgB,UAChBC,EAAYJ,EAAMK,MALA,EASsBC,mBAAS,IAT/B,mBASjBC,EATiB,KASAC,EATA,OAUMF,mBAAS,IAVf,mBAUjBG,EAViB,KAULC,EAVK,OAWUJ,mBAAS,GAXnB,mBAWjBK,EAXiB,KAWHC,EAXG,OAYcN,mBAAS,GAZvB,mBAYjBO,EAZiB,KAYDC,EAZC,OAaQR,mBAAS,IAbjB,mBAajBS,EAbiB,KAaJC,EAbI,KAelB5B,EAAS,CACX,CACInB,MAAO,mCACPa,MAAOoB,GAEX,CACIjC,MAAO,yCACPa,MAAOqB,IA6Bf,OACI,eAAC,IAAD,CACIc,aA5Bc,WAClBT,EAAmB,KA4BfU,QAAQ,IACRC,MAAM,UACNC,OAlDY,IAmDZf,MAAOD,EALX,UAOI,cAAC,IAAD,CACI1B,UAAWF,EAAQoB,MACnByB,WA/CC,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,UAiD9H,cAAC,IAAD,CAAO3C,UAAWF,EAAQgB,QAC1B,cAAC,IAAD,CAAqBb,MAAO,CAACe,OAxDnB,aAyDV,cAAC,IAAD,CACI4B,WArCQ,SAACC,EAAD,GAAqB,IAAZC,EAAW,EAAXA,MACzBhB,EAAmBP,EAAYwB,KAAI,SAAAC,GAAC,OAAIA,EAAEF,OAC1Cd,EAAQiB,OAAOC,OAAO3B,EAAY,GAAGuB,IAAQ,IAC7CZ,EAAUe,OAAOC,OAAO3B,EAAY,GAAGuB,IAAQ,IAC/CV,EAAYa,OAAOC,OAAO3B,EAAY,GAAGuB,IAAQ,IACjDR,EAASL,GAAgBA,EAAeE,KAiChCgB,SA5DK,GA6DLC,KAAM7B,EAAY,GAClBnB,MAAOoB,IAEX,cAAC,IAAD,CACI2B,SAjEK,GAkELC,KAAM7B,EAAY,GAClBnB,MAAOqB,IAEX,cAAC,IAAD,CACIzB,UAAWF,EAAQY,OACnB2C,YAAY,aACZC,MAAO5C,IAEX,cAAC,IAAD,CAAWwC,OAAQrB,EAAiB7B,UAAW,kBAA/C,SACI,8BACI,eAACD,EAAA,EAAD,CACIC,UAAWF,EAAQZ,OACnBe,MAAO,CAAEC,iBAhDPP,EAgDqC0C,EA/CpD1C,GAAe,GACP,OAASQ,OAAqB,IAAdR,EAAoB,KAAO,YAE3C,oBA4C0DS,MAzCpD,SAACT,GAClB,OAAGA,GAAe,GACP,UAEA,UAqCiEU,CAAagC,IAF7E,UAII,eAAC/B,EAAA,EAAD,CAAYN,UAAWF,EAAQU,KAAMD,UAAU,IAA/C,UAAoDwB,EAApD,YACA,eAACzB,EAAA,EAAD,CAAYN,UAAWF,EAAQW,QAASF,UAAU,IAAlD,4BAA4D0B,EAA5D,aACA,eAAC3B,EAAA,EAAD,CAAYN,UAAWF,EAAQW,QAASF,UAAU,IAAlD,kCAA6D4B,EAA7D,wBCvFToB,MAxCf,SAAsBjC,GAClB,IAEMkC,EAAYlC,EAAMmC,OAClBC,EAAcpC,EAAMqC,SAGpBP,EAAO,CACT,CACIQ,MAAOJ,EACPK,MAAO,gBAAQL,EACfpD,MANY,WAQhB,CACIwD,MAAOF,EACPG,MAAO,sBAASH,EAChBtD,MAVc,YActB,OACI,8BACI,cAAC,IAAD,CACI0D,WAAW,EACXnC,MAvBE,IAwBFe,OAvBG,IAwBHqB,UAAU,UACVX,KAAMA,EACNY,uBAAwB,GACxBC,YAAa,CACTC,WAAY,SACZ1E,SAAU,GACVC,WAAY,OACZwB,KAAM,WAEVkD,YAAU,O,oDCkGXC,MA9Hf,SAAqB9C,GACjB,IAAM+C,EAAS/C,EAAM+C,OACfC,EAAOhD,EAAMgD,KACbC,EAAcjD,EAAMkD,QACpBC,EAAanD,EAAMmD,WACnBC,EAAgBpD,EAAMoD,cACtBC,EAAkBrD,EAAMqD,gBACxBC,EAAkBtD,EAAMsD,gBACxBC,EAAkBvD,EAAMuD,gBACxBC,EAAWxD,EAAMwD,SACjBvD,EAAcD,EAAMC,YAVH,EAWOK,oBAAS,GAXhB,mBAWhBmD,EAXgB,KAWPC,EAXO,OAYOpD,mBAAS,IAZhB,mBAYhBqD,EAZgB,KAYPC,EAZO,KAcjBC,EAAQ,uCAAG,sBAAAC,EAAA,sDACbC,IAAMC,IAAIjB,EAAS,SAAWI,EAAWc,WACxCC,MAAK,SAAAC,GACFP,EAAWO,EAASrC,MACpBsC,QAAQC,IAAI,YAAclB,EAAWc,UAAY,yBAEpDK,OAAM,SAAAC,GACHH,QAAQC,IAAIE,MAPH,2CAAH,qDAWd,OACI,eAACC,EAAA,EAAD,CACIxB,KAAMA,EACNyB,OAAQxB,EAERT,WAAW,EACXkC,kBAAgB,gCAChBC,KAAK,KACLC,UAAQ,EAPZ,UASI,cAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,EAAzB,SACI,eAACN,EAAA,EAAMO,MAAP,WACI,6BAAK5B,EAAW7E,OAChB,6BAAK6E,EAAW6B,cAChB,6BAAK7B,EAAW8B,eAGvBxB,EACG,eAACe,EAAA,EAAMU,KAAP,WACI,qBAAKxG,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,SACI,wBAAOA,UAAU,uBAAjB,UACI,gCACI,+BACI,8CACA,8CACA,8CACA,yDAGR,gCAAQiF,EAAQlC,KAAI,SAAA4C,GAChB,OAAO,+BACH,6BAAKA,EAAIc,UACT,6BAAKd,EAAIlC,OAASkC,EAAIhC,WACtB,6BAAKgC,EAAIlC,SACT,6BAAKkC,EAAIhC,aAJGgC,EAAIe,gBAUpC,sBAAKzG,MAAO,CAAC0G,QAAS,OAAQC,eAAgB,iBAA9C,UACI,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM9B,GAAW,IAAlC,uCACA,cAAC+B,EAAA,EAAD,CAASxH,MAAM,2BAAOyH,UAAU,MAAMC,OAAK,EAA3C,SACI,cAACC,EAAA,EAAD,CAAYC,aAAW,SAASL,QAAS,kBAAM3B,KAA/C,SACI,cAAC,IAAD,CAAiBlF,MAAO,CAAET,SAAU,gBAMpD,eAACsG,EAAA,EAAMU,KAAP,WACI,gCACI,uEACA,cAACY,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAAC,EAAD,CACI7D,OAAQiB,EACRf,SAAUgB,MAGlB,eAAC2C,EAAA,EAAD,WACI,6BAAKxC,EAAW,WAChB,6BAAKA,EAAW,EAAIA,EAAW,6DAA+B,IAAbA,EAAiB,4DAAiB,mEACnF,6BAAKF,EAAkB,WACvB,6BAAKA,EAAkB,EAAI,gDAAgB,EAAIA,EAAmB,mCAAYA,EAAkB,EAAI,4BAAUA,EAAkB,mEAAmB,iFACnJ,6BAAKC,EAAkB,MACvB,6BAAKA,EAAkB,EAAI,yEAAqB,EAAIA,EAAmB,8BAAYA,EAAkB,EAAI,wEAAmBA,EAAkB,8BAAY,wGAK1K,gCACI,uEACA,8BACI,cAAC,IAAD,CAAW0C,eAAa,EAAxB,SAA0B,gBAAG5F,EAAH,EAAGA,MAAH,OACtB,cAAC,EAAD,CACIA,MAAOA,EACPJ,YAAaA,YAK7B,sBAAKtB,MAAO,CAAC0G,QAAS,OAAQC,eAAgB,iBAA9C,UACI,cAACC,EAAA,EAAD,CAAQC,QAAS,WACb3B,IACAH,GAAW,IAFf,uCAIA,cAAC+B,EAAA,EAAD,CAASxH,MAAM,2BAAOyH,UAAU,MAAMC,OAAK,EAA3C,SACI,cAACC,EAAA,EAAD,CAAYC,aAAW,SAASL,QAAS,kBAAMxF,EAAMkG,gBAArD,SACI,cAAC,IAAD,CAAiBvH,MAAO,CAAET,SAAU,oB,OC9CrDiI,MAvEf,YAAgD,IAA9BhD,EAA6B,EAA7BA,WAAYJ,EAAiB,EAAjBA,OAAQqD,EAAS,EAATA,OAC5BC,EAAelD,EAAWmD,QAAQnE,OAASgB,EAAWmD,QAAQjE,SAC9DkE,EAAepD,EAAWmD,QAAQE,QAAQC,eAAiBtD,EAAWmD,QAAQE,QAAQE,iBACtFC,EAAqBxD,EAAWmD,QAAQnE,OAASkE,EAEjD/C,EAAkB+C,EAAeE,EACjChD,GAA+D,KAA3CoD,EAFCxD,EAAWmD,QAAQE,QAAQC,eAAiBF,IAEGK,QAAQ,GAC5EpD,EAAWL,EAAW0D,aAAeR,EAPA,EAQL/F,mBAAS,IARJ,mBAQpCL,EARoC,KAQvB6G,EARuB,OASnBxG,oBAAS,GATU,mBASpC0C,EAToC,KAS9B+D,EAT8B,KAWrCb,EAAY,uCAAG,sBAAApC,EAAA,sDACjBC,IAAMC,IAAIjB,EAAS,iBAAmBI,EAAWc,WAChDC,MAAK,SAAAC,GACF2C,EAAe3C,EAASrC,MACxBsC,QAAQC,IAAI,YAAclB,EAAWc,UAAY,6BAEpDK,OAAM,SAAAC,GACHH,QAAQC,IAAIE,MAPC,2CAAH,qDAoBlB,OACI,qCACI,cAAC,IAAD,CACIyC,SAAS,EACTC,QAAS,CACL5H,SAAU,IAAI6H,MAAMC,KAAKC,OAAOjE,EAAWkE,SAAUlE,EAAWmE,WAChEC,OAAQ,MAJhB,SAOI,qBAEI/B,QAAS,WACLU,IApBhBE,EAAOjD,EAAWkE,SAAUlE,EAAWmE,WACvCP,GAAQ,IAsBIS,wBAAyB,CAACC,OAAQC,yBAC9B,cAAC,EAAD,CACIpJ,KAAM6E,EAAW7E,KACjBC,MAAOoI,OARVgB,KAAKC,YAalB,cAAC,EAAD,CACIzE,WAAYA,EACZJ,OAAQA,EACRG,QA9BQ,WAChB6D,GAAQ,IA8BA/D,KAAMA,EACNI,cAAeD,EAAWmD,QAAQnE,OAClCkB,gBAAiBF,EAAWmD,QAAQjE,SACpCiB,gBAAiBA,EACjBC,gBAAiBA,EACjBC,SAAUA,EACV0C,aAAcA,EACdjG,YAAaA,Q,2DCnEvBxC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkK,KAAK,aACHxI,SAAU,QACVkI,OAAQ,KACP5J,EAAMmK,YAAYC,GAAG,MAAQ,CAC5BxI,IAAK5B,EAAMG,QAAQ,KACnBkK,KAAMrK,EAAMG,QAAQ,OAGxBmK,KAAM,CACFrJ,gBAAiB,UACjBE,MAAO,UACPjB,QAASF,EAAMG,QAAQ,GACvBsD,OAAQ,OACRf,MAAO,QACPtC,UAAW,UAEfE,MAAO,CACLC,SAAU,GACVC,WAAY,KAEd+J,UAAU,aACR7I,SAAU,WACV8I,aAAcxK,EAAMyK,MAAMD,aAC1BvJ,gBAAiByJ,YAAK1K,EAAM2K,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACT5J,gBAAiByJ,YAAK1K,EAAM2K,QAAQC,OAAOC,MAAO,MAEpDnI,MAAO,QACN1C,EAAMmK,YAAYC,GAAG,MAAQ,CAC5BU,WAAY9K,EAAMG,QAAQ,GAC1B4K,YAAa/K,EAAMG,QAAQ,GAC3BuC,MAAO,SAGXsI,WAAY,CACVtI,MAAO1C,EAAMG,QAAQ,GACrBsD,OAAQ,OACR/B,SAAU,WACVuJ,cAAe,OACfvD,QAAS,OACTwD,WAAY,SACZvD,eAAgB,UAElBwD,UAAW,CACThK,MAAO,UACPuB,MAAO,QAET0I,UAAW,CACTlL,QAASF,EAAMG,QAAQ,EAAG,EAAG,EAAG,QAsCrBkL,EAlCG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACbzK,EAAUf,IADkB,EAEE6C,mBAAS,IAFX,mBAE3B4I,EAF2B,KAEfC,EAFe,KAIlC,OACE,qBAAKzK,UAAWF,EAAQqJ,KAAxB,SACE,eAACpJ,EAAA,EAAD,CAAMC,UAAWF,EAAQyJ,KAAzB,UACE,cAACjJ,EAAA,EAAD,CAAYN,UAAWF,EAAQP,MAA/B,mCACA,sBAAKS,UAAWF,EAAQ0J,UAAxB,UACE,qBAAKxJ,UAAWF,EAAQmK,WAAxB,SACE,cAAC,IAAD,MAEF,cAACS,EAAA,EAAD,CACEC,YAAa,sDACb7K,QAAS,CACL8K,KAAM9K,EAAQsK,UACdS,MAAO/K,EAAQuK,WAEnBS,WAAY,CAAE,aAAc,UAC5BC,SAAU,SAAAC,GAAC,OAAIP,EAAcO,EAAEC,OAAOpI,QACtCA,MAAO2H,EACPU,WAAY,SAAAF,GACM,UAAVA,EAAEG,MACJZ,EAASC,GACTC,EAAc,iBCuBjBW,MAnGf,YAA2C,IAAvB/G,EAAsB,EAAtBA,OAAQgH,EAAc,EAAdA,YAAc,EACFzJ,mBAAS,IADP,mBAC/B0J,EAD+B,KACnBC,EADmB,OAEN3J,mBAAS,mBAFH,mBAE/B+G,EAF+B,KAErB6C,EAFqB,OAGJ5J,mBAAS,oBAHL,mBAG/BgH,EAH+B,KAGpB6C,EAHoB,KAKhCC,EAAwBC,uBAAY,WAClCC,UAAUC,YACVD,UAAUC,YAAYC,oBAClB,SAAAnL,GACI+G,EAAO/G,EAASoL,OAAOpD,SAAUhI,EAASoL,OAAOnD,WACjDoD,EAAQ,6DAAiB,6GAAyB,cAK1DA,EAAQ,6DAAiB,gGAAsB,YAEpD,IAEHC,qBAAU,WACNP,MACD,CAACA,IAEJO,qBAAU,WACN,IAAMC,EAAe,WACjB7G,IAAMC,IAAIjB,EAAS,aAClBmB,MAAK,SAAAC,GACF8F,EAAc9F,EAASrC,MACvB4I,EAAQ,4BAAS,8EAAmB,WACpCtG,QAAQC,IAAI,mCAEfC,OAAM,SAAAC,GACHmG,EAAQ,yCAAY7L,OAAO0F,GAAQ,cAG3CqG,IACA,IAAMC,EAAWC,aAAY,kBAAMF,MAAgBb,GACnD,OAAO,WACHgB,cAAcF,MAEnB,CAAC9H,EAAQgH,IAGZ,IAAMW,EAAU,SAACzM,EAAOyM,EAASM,GAC7BC,QAAMC,gBAAgB,CAClBjN,MAAOA,EACPyM,QAASA,EACTM,KAAMA,EACNG,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CAAEC,SAAU,KACrBC,YAAa,CAAEC,OAAO,MAIxBtF,EAAS,SAACiB,EAAUC,GACtB4C,EAAY7C,GACZ8C,EAAa7C,IAkBjB,OACI,eAAC,IAAMqE,SAAP,WACI,cAAC,IAAD,CACA1E,QAAS,CACL2E,OAAQ,IAAI1E,MAAMC,KAAKC,OAAOC,EAAUC,GACxCuE,UAAW3E,MAAMC,KAAK2E,UAAUC,QAChCC,SAAU,EACVC,SAAU,GALd,SAMIjC,EAAWvI,KAAI,SAAAyK,GACX,OAAO,cAAC,EAAD,CAEH/I,WAAY+I,EACZnJ,OAAQA,EACRqD,OAAQA,GAHH8F,EAAOjI,gBAOxB,cAAC,EAAD,CAAWgF,SAhCG,SAACkD,IACJ,IAAIjF,MAAMC,KAAKiF,SAASC,QAChCC,cAAcH,GAAS,SAACI,EAAQC,GACrC,GAAIA,IAAWtF,MAAMC,KAAKiF,SAASK,OAAOC,GAAI,CAAC,IAAD,EAC3BH,EAAO,GAAhBI,EADoC,EACpCA,EAAGC,EADiC,EACjCA,EACXxG,EAAOwG,EAAGD,GACVjC,EAAQ,4BAAS,gIAA6B,gBACrC8B,IAAWtF,MAAMC,KAAKiF,SAASK,OAAOI,YAC/CnC,EAAQ,4BAAS,2FAAsB,UAEvCA,EAAQ,kCAAU,2JAAoC,oB,cC3DnDoC,MAff,WAIE,OACE,sBAAKnO,MAAO,CAACyC,OAAQ,QAArB,UACE,cAAC,IAAD,IACA,cAAC,EAAD,CACE2B,OAPS,sCAQTgH,YAPc,UCIPgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/I,MAAK,YAAkD,IAA/CgJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3ba8335b.chunk.js","sourcesContent":["import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Card from \"@material-ui/core/Card\"\nimport Typography from \"@material-ui/core/Typography\"\n\nconst useStyles = makeStyles(theme => ({\n  normal: {\n    padding: theme.spacing(0.7),\n    textAlign: \"center\",\n    minWidth: 40\n  },\n  title: {\n    fontSize: 13,\n    fontWeight: 700\n  }\n}))\n\nfunction SensorCard({ name,ratio }){\n  const classes = useStyles()\n\n  const getCardColor = (maskedRatio) => {\n    if(maskedRatio >= 0.5)\n       return \"hsl(\" + String(maskedRatio * 240 - 120) + \",80%,50%)\";\n    else\n        return \"hsl(0, 80%, 50%)\";\n  }\n\n  const getFontColor = (maskedRatio) => {\n      if(maskedRatio >= 0.7)\n          return \"#2E2E2E\";\n      else\n          return \"#FFFFFF\";\n  }\n\n  return (\n    <div>\n      <Card \n        className={classes.normal}\n        style={{ backgroundColor: getCardColor(ratio), color: getFontColor(ratio)\n      }}>\n        <Typography className={classes.title} component=\"p\">{name}</Typography>\n      </Card>\n    </div>\n  );\n}\n\nexport default SensorCard;\n","import React, {useState} from 'react';\nimport { XYPlot, Crosshair, XAxis, YAxis, VerticalBarSeries, HorizontalGridLines, DiscreteColorLegend } from 'react-vis';\nimport '../../node_modules/react-vis/dist/style.css';\nimport Card from \"@material-ui/core/Card\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles(theme => ({\n    normal: {\n        padding: theme.spacing(0.7),\n        minWidth: 90\n    },\n    time: {\n        textAlign: \"center\",\n        fontSize: 13,\n        fontWeight: 700\n    },\n    content: {\n        textAlign: \"left\",\n        fontSize: 13,\n        fontWeight: 700\n    },\n    legend: {\n        position: 'absolute', \n        right: '10px', \n        top: '5px'\n    },\n    yaxis: {\n        text: {\n            stroke: 'none', \n            fill: '#6b6b76', \n            fontWeight: 300\n        }\n    },\n    xaxis: {\n        line: {stroke: '#6b6b76'},\n        ticks: {stroke: '#6b6b76'},\n        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 300}\n    }\n}))\n\nfunction AverageChart(props){\n    const classes = useStyles()\n    const averageData = [props.averageData[\"masked\"], props.averageData[\"unmasked\"]];\n    const maskedColor = \"#7abd91\"\n    const unmaskedColor = \"#ff6962\"\n    const charWidth = props.width;\n    const chartHeight = 250;\n    const barWidth = 0.3;\n    const gridColor = '#DFE2E6'\n    const [crosshairValues, setCrosshairValues] = useState([]);\n    const [targetTime, setTime] = useState(\"\");\n    const [targetMasked, setMasked] = useState(0);\n    const [targetUnmasked, setUnmasked] = useState(0);\n    const [targetRatio, setRatio] = useState(\"\");\n    const tick = [\"0600\", \"0700\", \"0800\", \"0900\", \"1000\", \"1100\", \"1200\", \"1300\", \"1400\", \"1500\", \"1600\", \"1700\", \"1800\", \"1900\", \"2000\", \"2100\"]\n    const legend = [\n        {\n            title: ' 마스크 착용',\n            color: maskedColor,\n        },\n        {\n            title: ' 마스크 미착용',\n            color: unmaskedColor,\n        }\n    ]         \n    const _onMouseLeave = () => {\n        setCrosshairValues([]);\n    };\n\n    const _onNearestX = (value, {index}) => {\n        setCrosshairValues(averageData.map(d => d[index]));\n        setTime(Object.values(averageData[0][index])[1]);\n        setMasked(Object.values(averageData[0][index])[0]);\n        setUnmasked(Object.values(averageData[1][index])[0]);\n        setRatio(targetMasked / (targetMasked + targetUnmasked));\n    };\n\n    const getCardColor = (maskedRatio) => {\n        if(maskedRatio >= 0.5)\n            return \"hsl(\" + String(maskedRatio * 240 - 120) + \",80%,50%)\";\n        else\n            return \"hsl(0, 80%, 50%)\";\n    }\n\n    const getFontColor = (maskedRatio) => {\n        if(maskedRatio >= 0.7)\n            return \"#2E2E2E\";\n        else\n            return \"#FFFFFF\";\n    }\n\n    return (\n        <XYPlot\n            onMouseLeave={_onMouseLeave}\n            stackBy=\"y\"\n            xType=\"ordinal\" \n            height={chartHeight} \n            width={charWidth}\n        >\n            <XAxis \n                className={classes.xaxis}\n                tickValues={tick}\n            />\n            <YAxis className={classes.yaxis}/>\n            <HorizontalGridLines style={{stroke: gridColor}} />\n            <VerticalBarSeries\n                onNearestX={_onNearestX}\n                barWidth={barWidth}\n                data={averageData[0]}\n                color={maskedColor}\n            />\n            <VerticalBarSeries\n                barWidth={barWidth}\n                data={averageData[1]}\n                color={unmaskedColor}\n            />\n            <DiscreteColorLegend\n                className={classes.legend}\n                orientation=\"horizontal\"\n                items={legend}\n            />\n            <Crosshair values={crosshairValues} className={'test-class-name'}>\n                <div>\n                    <Card \n                        className={classes.normal}\n                        style={{ backgroundColor: getCardColor(targetRatio), color: getFontColor(targetRatio)\n                    }}>\n                        <Typography className={classes.time} component=\"p\">{targetTime}시</Typography>\n                        <Typography className={classes.content} component=\"p\">착용 : {targetMasked} 명</Typography>\n                        <Typography className={classes.content} component=\"p\">미착용 : {targetUnmasked} 명</Typography>\n                    </Card>\n                </div>\n            </Crosshair>\n        </XYPlot>\n    );\n}\nexport default AverageChart;","import React from 'react';\nimport { RadialChart } from 'react-vis';\n\nfunction CurrentChart(props){\n    const width = 250;\n    const height = 250;\n    const maskCount = props.masked;\n    const unmaskCount = props.unmasked;\n    const maskedColor = \"#7abd91\"\n    const unmaskedColor = \"#ff6962\"\n    const data = [\n        {\n            angle: maskCount,\n            label: '착용 ' + maskCount,\n            color: maskedColor,\n        },\n        {\n            angle: unmaskCount,\n            label: '미착용 ' + unmaskCount,\n            color: unmaskedColor,\n        }\n    ]\n\n    return (\n        <div>\n            <RadialChart\n                animation={true}\n                width={width}\n                height={height}\n                colorType=\"literal\"\n                data={data}\n                labelsRadiusMultiplier={0.8}\n                labelsStyle={{\n                    textAnchor: 'middle',\n                    fontSize: 16,\n                    fontWeight: \"bold\",\n                    fill: \"#F6F7FC\"\n                }}\n                showLabels\n            />\n        </div>\n    );\n}\nexport default CurrentChart;","import React, { useState } from 'react';\nimport Autosizer from \"react-virtualized-auto-sizer\";\nimport { Modal, Button, Container, Row, Col } from \"react-bootstrap\";\nimport AverageChart from './AverageChart';\nimport CurrentChart from './CurrentChart';\nimport SyncRoundedIcon from '@material-ui/icons/SyncRounded';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport axios from 'axios';\n\nfunction SensorModal(props){\n    const apiURL = props.apiURL;\n    const show = props.show;\n    const handleClose = props.onClose;\n    const sensorInfo = props.sensorInfo;\n    const currentMasked = props.currentMasked;\n    const currentUnmasked = props.currentUnmasked;\n    const totalDifference = props.totalDifference;\n    const ratioDifference = props.ratioDifference;\n    const capacity = props.capacity;\n    const averageData = props.averageData;\n    const [logView, setLogView] = useState(false);\n    const [logData, setLogData] = useState([]);\n\n    const fetchLog = async () => {\n        axios.get(apiURL + '/logs/' + sensorInfo.sensor_id)\n        .then(response => {\n            setLogData(response.data);\n            console.log(\"[FETCH] #\" + sensorInfo.sensor_id + \" Log Data Fetched!\");\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    return(\n        <Modal \n            show={show} \n            onHide={handleClose}\n            //react-bootstrap의 문제로 true로 설정하면 findDomNode 경고가 발생.\n            animation={true}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            size='lg'\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h1>{sensorInfo.name}</h1>\n                    <h6>{sensorInfo.description}</h6>\n                    <h6>{sensorInfo.address}</h6>\n                </Modal.Title>\n            </Modal.Header>\n            {logView ? \n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"wrapper\" >\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>시간</th>\n                                        <th>총원</th>\n                                        <th>착용</th>\n                                        <th>미착용</th>\n                                    </tr>\n                                </thead>\n                                <tbody>{logData.map(log => {\n                                    return <tr key={log.id}>\n                                        <td>{log.created}</td>\n                                        <td>{log.masked + log.unmasked}</td>\n                                        <td>{log.masked}</td>\n                                        <td>{log.unmasked}</td>\n                                    </tr>\n                                })}</tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                        <Button onClick={() => setLogView(false)}>요약 보기</Button>\n                        <Tooltip title=\"새로고침\" placement=\"top\" arrow>\n                            <IconButton aria-label=\"delete\" onClick={() => fetchLog()}>\n                                <SyncRoundedIcon style={{ fontSize: 30 }}/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </Modal.Body> \n                :\n                <Modal.Body>\n                    <div>\n                        <h2>실시간 데이터</h2>\n                        <Container>\n                            <Row>\n                                <Col>\n                                    <CurrentChart \n                                        masked={currentMasked}\n                                        unmasked={currentUnmasked}\n                                    ></CurrentChart>\n                                </Col>\n                                <Col>\n                                    <h1>{capacity + \"명\"}</h1>\n                                    <h5>{capacity > 0 ? capacity + \"명 더 입장 가능합니다.\" : capacity === 0 ? \"정원이 가득 찼습니다.\" : \"정원을 초과하였습니다.\"}</h5>\n                                    <h1>{totalDifference + \"명\"}</h1>\n                                    <h5>{totalDifference < 0 ? \"평균보다 사람이 \" + (-1 * totalDifference) + \"명 적습니다.\" : totalDifference > 0 ? \"평균보다 \" + totalDifference + \"명 많은 사람이 있습니다.\" : \"평균 만큼의 사람이 있습니다.\"}</h5>\n                                    <h1>{ratioDifference + \"%\"}</h1>\n                                    <h5>{ratioDifference < 0 ? \"평균보다 마스크 착용률이 \" + (-1 * ratioDifference) + \"% 낮습니다.\" : ratioDifference > 0 ? \"평균보다 마스크 착용률이 \" + ratioDifference + \"% 높습니다.\" : \"평균 수준의 마스크 착용률입니다.\"}</h5>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </div>\n                    <div>\n                        <h2>일평균 데이터</h2>\n                        <div>\n                            <Autosizer disableHeight>{({ width }) => (\n                                <AverageChart \n                                    width={width} \n                                    averageData={averageData}\n                                ></AverageChart>\n                            )}</Autosizer>\n                        </div>\n                    </div>\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                        <Button onClick={() => {\n                            fetchLog();\n                            setLogView(true);\n                        }}>로그 보기</Button>\n                        <Tooltip title=\"새로고침\" placement=\"top\" arrow>\n                            <IconButton aria-label=\"delete\" onClick={() => props.fetchAverage()}>\n                                <SyncRoundedIcon style={{ fontSize: 30 }}/>\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </Modal.Body>\n            }\n        </Modal>\n    );\n}\n\nexport default SensorModal;","/*global kakao*/\nimport { CustomOverlay } from 'react-kakao-maps'\nimport { renderToString } from 'react-dom/server'\nimport React, { useState } from 'react';\nimport SensorCard from './SensorCard';\nimport SensorModal from './SensorModal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nfunction Sensor({ sensorInfo, apiURL, moveTo }){\n    const currentTotal = sensorInfo.current.masked + sensorInfo.current.unmasked;\n    const averageTotal = sensorInfo.current.average.average_masked + sensorInfo.current.average.average_unmasked;\n    const currentMaskedRatio = sensorInfo.current.masked / currentTotal;\n    const averageMaskedRatio = sensorInfo.current.average.average_masked / averageTotal;\n    const totalDifference = currentTotal - averageTotal;\n    const ratioDifference = ((currentMaskedRatio - averageMaskedRatio) * 100).toFixed(1);\n    const capacity = sensorInfo.max_capacity - currentTotal;\n    const [averageData, setAverageData] = useState([]);\n    const [show, setShow] = useState(false);\n\n    const fetchAverage = async () => {\n        axios.get(apiURL + '/logs/average/' + sensorInfo.sensor_id)\n        .then(response => {\n            setAverageData(response.data);\n            console.log(\"[FETCH] #\" + sensorInfo.sensor_id + \" Average Data Fetched!\");\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    const handleShow = () => {\n        moveTo(sensorInfo.latitude, sensorInfo.longitude)\n        setShow(true);\n    }\n\n    const handleClose = () => {\n        setShow(false);\n    }\n\n    return(\n        <>\n            <CustomOverlay \n                visible={true}\n                options={{\n                    position: new kakao.maps.LatLng(sensorInfo.latitude, sensorInfo.longitude),\n                    zIndex: 9999\n                }}\n            >\n                <div \n                    key={Math.random()}\n                    onClick={() =>{\n                        fetchAverage();\n                        handleShow();\n                    }} \n                    dangerouslySetInnerHTML={{__html: renderToString(\n                        <SensorCard \n                            name={sensorInfo.name}\n                            ratio={currentMaskedRatio}\n                        ></SensorCard>\n                    )}}\n                />\n            </CustomOverlay>\n            <SensorModal \n                sensorInfo={sensorInfo}\n                apiURL={apiURL}\n                onClose={handleClose}\n                show={show}\n                currentMasked={sensorInfo.current.masked}\n                currentUnmasked={sensorInfo.current.unmasked}\n                totalDifference={totalDifference}\n                ratioDifference={ratioDifference}\n                capacity={capacity}\n                fetchAverage={fetchAverage}\n                averageData={averageData}\n            />\n        </>\n    );\n}\n\nexport default Sensor;","import React, { useState } from \"react\"\nimport Typography from \"@material-ui/core/Typography\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport { fade, makeStyles } from \"@material-ui/core/styles\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport Card from \"@material-ui/core/Card\"\n\nconst useStyles = makeStyles(theme => ({\n  base: {\n    position: \"fixed\",\n    zIndex: 1000,\n    [theme.breakpoints.up(\"sm\")]: {\n      top: theme.spacing(2.5),\n      left: theme.spacing(2.5)\n    }\n  },\n  card: {\n      backgroundColor: \"#84B637\",\n      color: \"#000000\",\n      padding: theme.spacing(1),\n      height: \"90px\",\n      width: \"400px\",\n      textAlign: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 100\n  },\n  searchBox: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\"\n  },\n  inputMain: {\n    padding: theme.spacing(1, 1, 1, 7),\n  }\n}))\n\nconst SearchBar = ({ onSearch }) => {\n  const classes = useStyles()\n  const [searchText, setSearchText] = useState(\"\")\n\n  return (\n    <div className={classes.base}>\n      <Card className={classes.card}>\n        <Typography className={classes.title}>마스크 ON</Typography>\n        <div className={classes.searchBox}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            placeholder={\"지역 및 매장명 검색\"}\n            classes={{\n                root: classes.inputRoot,\n                input: classes.inputMain\n            }}\n            inputProps={{ \"aria-label\": \"search\" }}\n            onChange={e => setSearchText(e.target.value)}\n            value={searchText}\n            onKeyPress={e => {\n                if (e.key === \"Enter\") {\n                  onSearch(searchText)\n                  setSearchText(\"\")\n                }\n            }}\n          />\n        </div>\n      </Card>\n    </div>\n  )\n}\n\nexport default SearchBar\n","/*global kakao*/\nimport { Map } from 'react-kakao-maps'\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Sensor from './Sensor';\nimport { store } from 'react-notifications-component';\nimport SearchBar from \"./SearchBar\";\nimport axios from 'axios';\n\nfunction KakaoMap({ apiURL, refreshTerm }){\n    const [sensorData, setSensorData] = useState([])\n    const [latitude, setLatitude] = useState(37.40213319610438)\n    const [longitude, setLongitude] = useState(127.10863508204353)\n\n    const moveToCurrentLocation = useCallback(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    moveTo(position.coords.latitude, position.coords.longitude)\n                    message(\"현위치 좌표 설정 성공!\", \"현위치 기반으로 좌표가 설정되었습니다.\", \"success\")\n                }\n            )\n        }\n        else{\n            message(\"현위치 좌표 설정 실패!\", \"기본값으로 좌표가 설정되었습니다.\", \"danger\")\n        }\n    }, [])\n\n    useEffect(() => {\n        moveToCurrentLocation();\n    }, [moveToCurrentLocation])\n\n    useEffect(() => {\n        const fetchSensors = () => {\n            axios.get(apiURL + '/sensors/')\n            .then(response => {\n                setSensorData(response.data);\n                message(\"정보 갱신\", \"센서 정보가 갱신되었습니다.\", \"success\")\n                console.log(\"[FETCH] Sensor Data Fetched!\")\n            })\n            .catch(error => {\n                message(\"정보 갱신 에러\", String(error), \"danger\")\n            });\n        }\n        fetchSensors();\n        const interval = setInterval(() => fetchSensors(), refreshTerm)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [apiURL, refreshTerm])\n\n\n    const message = (title, message, type) => {\n        store.addNotification({\n            title: title,\n            message: message,\n            type: type,\n            insert: \"top\",\n            container: \"top-right\",  \n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: { duration: 5000 },\n            dismissable: { click: true }\n        });\n    }\n\n    const moveTo = (latitude, longitude) => {\n        setLatitude(latitude)\n        setLongitude(longitude)\n    }\n\n    const keywordSearch = (keyword) => {\n        const places = new kakao.maps.services.Places()\n        places.keywordSearch(keyword, (result, status) => {\n          if (status === kakao.maps.services.Status.OK) {\n            const { x, y } = result[0]\n            moveTo(y, x)\n            message(\"검색 결과\", \"키워드로 검색된 위치로 좌표가 설정되었습니다.\", \"success\")\n          } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n            message(\"검색 결과\", \"키워드로 검색된 결과가 없습니다.\", \"danger\")\n          } else {\n            message(\"서비스 오류\", \"서비스에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.\", \"danger\")\n          }\n        })\n    }\n\n    return(\n        <React.Fragment>\n            <Map\n            options={{\n                center: new kakao.maps.LatLng(latitude, longitude),\n                mapTypeId: kakao.maps.MapTypeId.ROADMAP,\n                maxLevel: 6,\n                minLevel: 2\n            }}>{sensorData.map(sensor => {\n                    return <Sensor \n                        key={sensor.sensor_id}\n                        sensorInfo={sensor}\n                        apiURL={apiURL}\n                        moveTo={moveTo}\n                    ></Sensor>\n                })}\n            </Map>\n            <SearchBar onSearch={keywordSearch}></SearchBar>\n        </React.Fragment>\n    );\n}\n\nexport default KakaoMap;","import './App.css';\nimport KakaoMap from './Components/KakaoMap';\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\nimport \"animate.css/animate.css\";\n\nfunction App() {\n  const apiURL = 'http://http://13.125.56.71:8000/api';\n  const refreshTerm = 30000;\n\n  return (\n    <div style={{height: \"100%\"}}>\n      <ReactNotification />\n      <KakaoMap \n        apiURL={apiURL} \n        refreshTerm={refreshTerm}\n      ></KakaoMap>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}